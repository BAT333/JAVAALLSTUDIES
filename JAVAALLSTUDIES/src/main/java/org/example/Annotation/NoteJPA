Java Persistence API é uma API padrão da linguagem Java que descreve uma interface comum para frameworks
de persistência de dados. A JPA define um meio de mapeamento objeto-relacional para objetos Java simples e comuns,

A JPA padroniza a importante tarefa de mapeamento relacional de objetos utilizando anotações ou o XML para mapear
objetos para uma ou mais tabelas de um banco de dados.
Motivos para te criado foi que JBDC era muito verboso e tambem que AutoClopamento que qualquer mudança no banco de
dados teria que mudar tudo no codigo

                                                diferença
Aprender o JDBC é essencial para entender os fundamentos do acesso a dados e ter um controle granular
sobre as operações de banco de dados. O Spring JPA, por outro lado, oferece uma camada de abstração mais
alta e recursos poderosos para aumentar a produtividad

JDBC depende de banco de dados, o que significa que scripts diferentes devem ser escritos para bancos de dados
diferentes. Por outro lado, JPA é independente de banco de dados, o que significa que o mesmo código pode ser
usado em vários bancos de dados com poucas (ou nenhuma) modificações.

O Hibernate é de fato o framework ORM, ou seja, a implementação física do que você usará para persistir,
remover, atualizar ou buscar dados no SGBD. Por outro lado, o JPA é uma camada que descreve uma interface
comum para frameworks ORM.

//Trasformando class em banco de dados com hibernate
@Entity    ---> QUE ESSA CLASS REPRESENTA ALGUMA TABELA NO BANCO DE DADOS
@Entity -> mostra que aqui tabela, principal
@Table(name="user") -> se caso nome da tabela e class for diferente,aqui coloca nome da tabela
no banco de dados
class User {
   @Id-> define que chave primaria
   @GeneratedValue(strategy = GenerationType.IDENTITY)->que vai gerando sozinho
   @Column(name="id")-> aqui mostra como esta no banco de dados, que igual nome que ta na class
   public Integer id;

   @Column(name="name", unique=true, length=100)
   aqui configuração da tabela que name tem ser unico, e que no maximo tem 100 carcteres
   public String name;

   @Column(name="level", nullable=true)
   aqui nullable mostra que não pode ser null
   public Integer level;

   @Column(name="created_date",unique = true)
   public Date createdDate;
}




______________________________________________________________________________________________

PARA CONFIGURA UMA JPA VC PRIMEIRO TEM FAZER TUDO ISSO
PRIMEIRO CRIAR UM FOLDE/PASTA TEM CRIAR NO ARQUIVO RESOURCER
COM ESSE NAME :  META-INF
CRIAR UM FILE COM NAME : persistence.xml
 <?xml version="1.0" encoding="UTF-8"?>
 //CRIA UM PERSISTENCE MOSTRANDO ELE
 <persistence version="2.2"
              xmlns="http://xmlns.jcp.org/xml/ns/persistence"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
              //CONFIGURA BANCO DE DADOS
              //NAME PODE SER QUALQUER UM MAIS SE VC CRIAR 2 BANCO DE DADOS VC PRECISA CONFIGURA OS 2 DANDO NOME DIFERTES
              //O atributo transaction-type indica que nossa unidade de persistência usa o nível
              //de recurso EntityTransaction ao invés de transações JTA. O elemento class lista as
              //entidades que são parte da unidade de persistência.
     <persistence-unit name="comex" transaction-type="RESOURCE_LOCAL">
     //AQUI CONFIGURAÇÃO DO BANCO QUE VC VAI USAR
         <properties>
             <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
             <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/comex"/>
             <property name="javax.persistence.jdbc.user" value="root"/>
             <property name="javax.persistence.jdbc.password" value="Rafael234"/>
             <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL8Dialect"/>

         </properties>

     </persistence-unit>
 </persistence>
// DEPENDENDO DA JPA QUE VC TIVER ULTILIZANDO VC PRECISA DIZER QUAL CAMINHO DELA
    <class>src/main/java/org/example/PercistenciaHibernate/Class/Address.java</class>
// DESTA FORMA
// VC PRECISA CRIA UMA CLASS PARA REPRESENTAR ENTIDADE  UMA TABELA DO BANCO DE DADOS

aqui para saber conversão dos bancos de dados e dos comando especificos de cada um deles
e tipagem que casa banco aceita
        <property name="dialect">org.hibernate.dialect.Oracle9Dialect</property>

aqui para conectar qual branco de dados que é ex: mysql,h2,oracle etc
    	<property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
aqui url dele
    	<property name="connection.url">jdbc:oracle:thin:@localhost:1521:supershop</property>
aqui nome do seu banco de dados
    	<property name="connection.username">root</property>
aqui senha dele
    	<property name="connection.password">secret</property>
aqui para mostra comantos que hibernate faz
    	<property name="hibernate.show_sql ">true</property>
aqui para fazer comando update sempre no banco de acordo que se muda com sua tabela
    	<property name="hbm2ddl.auto">update</property>

   ------------------------Alguns metodos do JPA-----------------------------
AQUI PARA VC FAZER FACTORY CONEXÃO ABRIR UMA CONEXÃO
EntityManagerFactory managerFactory = Persistence.createEntityManagerFactory("endereco");
EntityManager manager = managerFactory.createEntityManager();

//AQUI VC ABRE CONEXÃO PARA MODIFICAR TABELA
manager.getTransaction().begin();
 --> AQUI PARA FAZER COMMIT E MANDA PARA BD
manager.getTransaction().commit();
 -->AQUI PARA FECHAR CONEXÃO
manager.close();

AQUI PEGA CLASS PELO SEU ID
Client client = manager.get(Client.class, id);
return user;

AQUI MANDA AS INFOS PARA BANCO DE DADOS
manager.persist(Clint);

AQUI PARA REMOVE
manager.remove(Client);

QUISER REMOVER UM ESPECIFICO USE FILD OU GET PARA PEGAR AQUELE POR ID
Client client = manager.find(Client.class, id)
manager.remove(Client);

PARA FAZER PESQUISA EM JPA
PARA VC FAZER A PESQUISA EM JPA, QUASE IGUAL NO SQL, SO QUE INVES DO * VC USA
NAME DECLARADO COMO AQUI NO EXPLO FOI U
String hql = "select distinct u.NAME from User u where u.created > '2020-01-01'";
TEM TBM WHERE PARA COISAS ESPECIFICAS

DISTINCT
AQUI PARA NÃO PEGAR COISAS IGUAIS NOME OU ID ETC

//AQUI PARA RETONA COISAS UNICAS EXEMPLO NOME
Query<String> query = session.createQuery(hql , String.class);
AQUI RETONA A LIST
return query.list();
AQUI RETORNA A LISTA TODA
getResultStream()


AQUI PARA UPDATE
//PASSA CODIGO E RETONA ELA
Query<User> query = session.createQuery("update User set level=level+1", User.class);
int count = query.executeUpdate();




---------------------------------------------MAPEAMENTO DE TABELA E TABELA RELACIONADA---------------------------------------
@Entity
@Table(name="user")
class User {
   @Column(name="id")
   public Integer id;

   @Column(name="name")
   public String name;

   @Column(name="endereco_ID")
   public Integer endereco;

   @Column(name="deadline")
   public Date deadline;
}

@Entity
@Table(name="endereco")
class enderco {
   @Column(name="id")
   public Integer id;

   @Column(name="name")
   public String rua;

   @Column(name="salary")
   public Integer bairro;

   @Column(name="join_date")
   public int number;
}
COMO FAZER RELACIONAMENTO E MOSTRA RELACIONAMENTO NA CLASS USER

@Entity
@Table(name="user")
class User {
   @Column(name="id")
   public Integer id;

   @Column(name="name")
   public String name;

   @ManyToOne
   @JoinColumn(name="employee_id", nullable=true)
   public Endereco endereco;

   @Column(name="deadline")
   public Date deadline;
}
EXPLICANDO O CODIGO
   @ManyToOne -> TIPO DE RELACIONAMENTO DELE QUE É DE 1 PARA MUITOS/ DE MUITOS PARA MUITOS/ OU DE 1 PARA 1  ETC
   @JoinColumn(name="employee_id", nullable=true)--> JUNTAR TABELA -> NAME QUE ESTA SALVO NO BANCO
   public Endereco endereco;

//FAZENDO SELECT COM JOIN
SELECT USER.* FROM USER JOIN ENDERECO ON USER.employee_id = ENDERECO.id
WHERE USER.name = "Ivan Ivanovich";
// PASSANDO PARAMETRO
        String jdpt = "SELECT e FROM Endereco e WHERE e.rua = ?1 ";
      return entityManager.createQuery(jdpt,Endereco.class).setParameter(1,RUA).getResultList();
      VC PODE PASSA ? e usar setParameter(peloOqvcvaisubstirutiro?, e nome da rua  )

      https://codegym.cc/pt/quests/lectures/pt.questhibernate.level10.lecture05












// EXPLICANDO ALGUMAS ANOTAÇÃO JPA
@Table(name = "")   -----> SE SEU BANCO DE DADOS E SUA TABELA TIVER NOME DIFERENTES JPA ACHAR TABELA REPRESENTADA PELA
ENTIDADE
   @Id ----> QUE AQUELE ATRIBUTO É CHAVE PRIMARIA NO BANCO DE DADOS
   @GeneratedValue(strategy = GenerationType.IDENTITY)  ---> QUE CHAVE PRIMARIA SE COMPLETA TADINHA E GenerationType
   DEPENDE DO TIPO DO SEU BANCO
   @Column(name = "") -----> SUA COLUNA TEM NOME DIFERENTE DO ATRIBUTO, AQUI VC PASSA ESSA ANOTAÇÃO DIZ QUE NAME DESTA
   COLUNA É IGUAL ESSE ATRIBUTO
   // E SE NOMES FOREM IGUAL NÃO PRECISA


   // Para add infos no banco de dados
   // primeiro criar  EntityManagerFactory e depois fazer Persistece dele e criar passando como parametro as configuração
   que vc fez no banco de dados como no que vc deu no meu caso comex
          EntityManagerFactory managerFactory = Persistence.createEntityManagerFactory("comex");
    // vc cria entitymesger e criar
           EntityManager entityManager = managerFactory.createEntityManager();
    //aqui para começar a implementar a begin
           entityManager.getTransaction().begin();
           // com isso faz salvar no banco de dados e amarzenar infos
           entityManager.persist(cadastro);
           // aqui para dar commit e inserir
           entityManager.getTransaction().commit();
           ____________________________________________________


                  EntityManagerFactory managerFactory = Persistence.createEntityManagerFactory("comex");
                   EntityManager entityManager = managerFactory.createEntityManager();
                   entityManager.getTransaction().begin();
                   entityManager.persist(cadastro);
                   entityManager.getTransaction().commit();
       -----------------------------------------------------------------------
       //    @Enumerated(EnumType.STRING)
Aqui faz salvar de diferentes maneira pelo tipo int ou tipo String dele

merge() ---> faz com que o JPA que esta no estado  detacherd volte para manged que faz recer infos
atualizar ou commit no banco des que vc não fecha a conexão com close ou ja tenha feito o Commit
 //atualizar;

        Endereco procuraEnderecco = entityManager.find(Endereco.class, 3);
        procuraEnderecco.setCep("123455");
        entityManager.flush();

        entityManager.merge(procuraEnderecco);

        entityManager.getTransaction().commit();
        entityManager.close();

  // pesquisar
  //basicamente vc pega class e passa chave primaria e oq vc quer pesquisar ou deletar
  Endereco procuraEnderecco = entityManager.find(Endereco.class, 3);

                Endereco merge = entityManager.merge(procuraEnderecco);
                System.out.println("Pesquisar "+merge);
   // find(Endereco.class,3);
   //faz pesquisa no banco de dados passa entidade/class, e pega pelachave primaria
   //.remove() --> remove as coisas do banco de dados, detalhe tem que tar em
   //menager


   // pesquisa de tudo na tabela com JPA
String jpql = "SELECT e  FROM Endereco e ";---> mesma forma de pesquisa do sql so muda * ou coisas do tipo
 List<Endereco> enderecoList =  entityManager.createQuery(jpql,Endereco.class).getResultList();
 //manda a comando para createQuery e traforma e lista com get Resulte
 //filtrando  por paramentro
 String jpql = "SELECT e  FROM Endereco e WHERE e.cep = :cep";
List<Endereco> enderecoList =  entityManager.createQuery(jpql,Endereco.class).setParameter("cep","12314").getResultList();
 String jpql = "SELECT e  FROM Endereco e WHERE e.cep = ?1";

 //pesquisa de uma coisa com uma linha so
         String jpql = "SELECT e.bairro  FROM Endereco e WHERE e.id = ?1";
         String enderecoList =  entityManager.createQuery(jpql,String.class).setParameter(1,5).getSingleResult();

 // pesquisa por POR ALGO EXPECIFICO
  public List<String> listName(){
         String sql = "SELECT c.name FROM Client c";
         List<String> clients = this.manager.createQuery(sql,String.class).getResultList();
         return clients;

     }
  // POR UMA UNICA COISA
public String listName(String name){
         String sql = "SELECT c.name FROM Client c WHERE c.name = ?1";
         String nome = this.manager.createQuery(sql,String.class).setParameter(1,name).getSingleResult();
         return nome;

     }
     //se for um retorno de um coisa especifica tipo nome
     // vc tem colocar List<String> da tipagem dele que String


     //como vc tem fazer para crias um banco relacional
     // primeiro vc tem que cria as duas tabelas em java
     //depois vc tem que na tabela que vc vai relacionar normalmente de muitos para um
     // @OneToMany colocar essa tag
     // antes disso vc tem cadastra a categoria para depois passar para eles relacionamente
@Embeddable-> class que vc quer unir
@Embedded-> atributo onde unir
private Enderec endereco;



    @ManyToOne Aqui mostra que entidade banco relacional

    O @ManyToOne diz que um Review tem um Usuario e um Usuario pode ter muitos Review. Desta maneira,
     quando você carregar o Review, basta chamar review.getUsuario() para obter o usuário relacionado.

    Procure por @OneToOne e @OneToMany. Ou melhor, leia a documentação do Hibernate


